---
title: "Homework5"
execute: 
  error: true
  warning: false
author: "Haina Qian"
format: 
  html:
    embed-resources: true
editor: visual
---

# Problem 1

## (a)

```{r}
# Library the package we want.
library(Rcpp)

```

```{r}
#' @title Define the Rational Class
#' @description Create a class to represent rational numbers (fractions).
#' @slot numerator The numerator of the fraction, must be an integer.
#' @slot denominator The denominator of the fraction, must be an integer and non-zero.
#' @validity Ensures that the denominator is non-zero and both numerator and denominator are integers.
setClass(
  "rational",
  slots = list(
    numerator = "numeric",
    denominator = "numeric"
  ),
  validity = function(object) {
    if (object@denominator == 0) {
      stop("Denominator cannot be zero.")
    }
    if (!is.numeric(object@numerator) || !is.numeric(object@denominator)) {
      stop("Both the numerator and denominator should be numeric.")
    }
    if (object@numerator != floor(object@numerator)) {
      stop(paste0("@numerator = ", object@numerator, " is not a valid numerator (should be an integer)."))
    }
    if (object@denominator != floor(object@denominator)) {
      stop(paste0("@denominator = ", object@denominator, " is not a valid denominator (should be an integer)."))
    }
    TRUE
  }
)

#' @title Construct a Rational Object
#' @description Create a new rational object using a numerator and a denominator.
#' @param numerator The numerator of the fraction (integer).
#' @param denominator The denominator of the fraction (integer, non-zero).
#' @return A rational object.
rational <- function(numerator, denominator) {
  new("rational", numerator = numerator, denominator = denominator)
}

#' @title Display a Rational Object
#' @description Show the rational object in fraction format.
#' @param object A rational object.
#' @return The fraction as a character string.
setMethod("show", "rational", function(object) {
  cat(object@numerator, "/", object@denominator, "\n", sep = "")
})

#' @title Define GCD and LCM in C++
#' @description Use Rcpp to define functions for calculating the greatest common divisor (GCD) and least common multiple (LCM).
cppFunction("
  int gcd(int a, int b) {
    while (b != 0) {
      int temp = b;
      b = a % b;
      a = temp;
    }
    return a;
  }
  
  int lcm(int a, int b) {
    return (a * b) / gcd(a, b);
  }
")

#' @title Simplify a Rational Object
#' @description Reduce a rational object to its simplest form by dividing the numerator and denominator by their GCD.
#' @param object A rational object.
#' @return A simplified rational object.
setGeneric(
  "simplify",
  function(object) standardGeneric("simplify")
)

setMethod(
  "simplify", 
  "rational",
  function(object) {
    gcd_value <- gcd(abs(object@numerator), abs(object@denominator))
    rational(
      numerator = object@numerator / gcd_value,
      denominator = object@denominator / gcd_value
    )
  }
)

#' @title Calculate the Quotient
#' @description Compute the decimal representation of a rational object. Optionally, round to a specified number of digits.
#' @param object A rational object.
#' @param digits (Optional) The number of decimal places to round to. Must be a non-negative integer.
#' @return The computed quotient (invisible).
setGeneric("quotient", function(object, digits = NULL) {
  standardGeneric("quotient")
})

setMethod("quotient", "rational", function(object, digits = NULL) {
  q <- object@numerator / object@denominator
  
  if (!is.null(digits)) {
    if (!is.numeric(digits) || digits < 0 || digits != as.integer(digits)) {
      stop("Digits must be a non-negative integer.")
    }
    formatted_q <- format(round(q, digits), nsmall = digits, scientific = FALSE)
  } else {
    formatted_q <- format(q, scientific = FALSE)
  }
  
  print(formatted_q)
  invisible(q)
})

#' @title Overload the "+" Operator
#' @description Perform addition of two rational objects.
#' @param e1 The first rational object.
#' @param e2 The second rational object.
#' @return A new rational object representing the sum.
setMethod("+", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@denominator + e2@numerator * e1@denominator
  denominator <- e1@denominator * e2@denominator
  simplify(new("rational", numerator = numerator, denominator = denominator))
})

#' @title Overload the "-" Operator
#' @description Perform subtraction of two rational objects.
#' @param e1 The first rational object.
#' @param e2 The second rational object.
#' @return A new rational object representing the difference.
setMethod("-", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@denominator - e2@numerator * e1@denominator
  denominator <- e1@denominator * e2@denominator
  simplify(new("rational", numerator = numerator, denominator = denominator))
})

#' @title Overload the "*" Operator
#' @description Perform multiplication of two rational objects.
#' @param e1 The first rational object.
#' @param e2 The second rational object.
#' @return A new rational object representing the product.
setMethod("*", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  numerator <- e1@numerator * e2@numerator
  denominator <- e1@denominator * e2@denominator
  simplify(new("rational", numerator = numerator, denominator = denominator))
})

#' @title Overload the "/" Operator
#' @description Perform division of two rational objects.
#' @param e1 The first rational object (dividend).
#' @param e2 The second rational object (divisor). The numerator of `e2` must not be zero.
#' @return A new rational object representing the quotient.
setMethod("/", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  if (e2@numerator == 0) {
    stop("Division by a rational number with a numerator of 0 detected.")
  }
  numerator <- e1@numerator * e2@denominator
  denominator <- e1@denominator * e2@numerator
  simplify(new("rational", numerator = numerator, denominator = denominator))
})


```

## (b)

```{r}
# Example Test Cases
r1 <- rational(24, 6)
r2 <- rational(7, 230)
r3 <- rational(0, 4)

# Display examples
r1
r3
r1 + r2
r1 - r2
r1 * r2
r1 / r2
r1 + r3
r1 * r3
r2 / r3
quotient(r1)
quotient(r2)
quotient(r2, digits = 3)
quotient(r2, digits = 3.14)
quotient(r2, digits = "avocado")
q2 <- quotient(r2, digits = 3)
q2
quotient(r3)
simplify(r1)
simplify(r2)
simplify(r3)

```

## (c)

```{r}
# Check some malformed input to my constructor.
rational(2, 0)
rational("q", 1)
rational(1, "w")
rational(1.2, 1)
rational(1, 1.2)
```

# Problem 2

## (a)

```{r}
# Library the packages we want.
library(plotly)
library(tidyverse)

```

```{r}
# Import the csv.
df <- read.csv("D:/Umich_MAS/semester1/STATS_506/R_work/20241031_hainaq/df_for_ml_improved_new_market.csv")

# Calculate the amount of a certain genre annually.
df2 <- df %>%
  group_by(year) %>%
  summarise(
    Photography = sum(Genre___Photography == 1),
    Print = sum(Genre___Print == 1),
    Sculpture = sum(Genre___Sculpture == 1),
    Painting = sum(Genre___Painting == 1),
    Others = sum(Genre___Others == 1)
    ) %>%
  ungroup()

# Use pivot_longer to better classify the genres of the arts annually.
genres_of_year <- df2 %>%
  pivot_longer(cols = c(Photography, Print, Sculpture, Painting, Others),
               names_to = "Genre", values_to = "Counts")

# Get all years for the xaxis.
all_years <- unique(genres_of_year$year)

# Create a stacked bar chart using Plotly.
fig <- plot_ly(
  data = genres_of_year,
  x = ~year,                
  y = ~Counts,              
  color = ~Genre,
  customdata = ~Genre, 
  colors = c("Photography" = "#7C9D97", "Print" = "#9CB0C3",
             "Sculpture" = "#BD9AAD", "Painting" = "#9193B4",
             "Others" = "#2F2D54"),
  type = "bar",            
  hovertemplate = paste(
    "Year: %{x}<br>",       
    "Count: %{y}<br>",      
    "Genre: %{customdata}<extra></extra>"
  )
) %>%
  layout(
    barmode = "stack",       
    title = list(text = "<b>Distribution of the Genres of the Arts Every Year</b>", 
                 x = 0.5, font = list(size = 20)),
    xaxis = list(
      title = "<b>Year</b>",
      font = list(size = 14),
      tickmode = "array",    
      tickvals = all_years, 
      tickangle = 45        
    ),
    yaxis = list(
      title = "<b>Counts of the Arts</b>",
      font = list(size = 14),
      tickmode = "linear",  
      dtick = 100            
    ),
    legend = list(
      title = list(text = "<b>Genre</b>"),  
      font = list(size = 10)
    ),
    margin = list(t = 50, b = 50) 
  )

# Show the plot.
fig
```

## (b)

```{r}
# Calculate the average price of each genre in each year.
df3 <- df %>%
  select(year, price_usd, Genre___Photography, Genre___Print, 
         Genre___Sculpture, Genre___Painting, Genre___Others) %>%
  rename(Photography = Genre___Photography, 
         Print = Genre___Print, 
         Sculpture = Genre___Sculpture, 
         Painting = Genre___Painting, 
         Others = Genre___Others) %>%
  pivot_longer(cols = -c(year, price_usd), 
               names_to = "Genre", values_to = "whether_not") %>%
  filter(whether_not == 1) %>%  
  group_by(year, Genre) %>%
  summarise(avg_price = mean(price_usd, na.rm = TRUE), .groups = "drop")

# Calculate the overall average price in each year.
df4 <- df %>%
  group_by(year) %>%
  summarise(avg_price = mean(price_usd, na.rm = T)) %>%
  ungroup() %>%
  mutate(Genre = "Overall")

# Combine the overall average price with each genre's average price.
df_combined <- bind_rows(df3, df4)

# Draw interactive charts using Plotly.
fig <- plot_ly(
  data = df_combined,
  x = ~year,
  y = ~avg_price,
  color = ~Genre,
  colors = c("Overall" = "#397FC7", 
             "Photography" = "#7C9D97", 
             "Print" = "#9CB0C3", 
             "Sculpture" = "#BD9AAD", 
             "Painting" = "#9193B4", 
             "Others" = "#2F2D54"),
  type = 'scatter',
  mode = 'lines+markers',
  line = list(width = 1.2),  
  marker = list(size = 6),   
  hovertemplate = paste(
    "Year: %{x}<br>",
    "Price: $%{y:.2f}<extra></extra>"  
  )
) %>%
  layout(
    title = list(
      text = "<b>Art Sales Price Over Time of Each Genre</b>",  
      x = 0.5,
      font = list(size = 20)
    ),
    xaxis = list(
      title = list(
        text = "<b>Year</b>",  
        font = list(size = 14)
      ),
      tickmode = "linear",
      tickvals = unique(df_combined$year),
      tickangle = 45
    ),
    yaxis = list(
      title = list(
        text = "<b>Average Sales Price (USD)</b>",  
        font = list(size = 14)
      )
    ),
    legend = list(
      title = list(text = "<b>Genre</b>"), 
      font = list(size = 10)
    ),
    margin = list(t = 50, b = 50),  
    hovermode = "closest" 
  )

# Show the plot.
fig
```

# Problem 3

## (a)

```{r}
# Library the packages we want.
library(data.table)
library(nycflights13)
library(kableExtra)
library(knitr)

# Convert to data.table.
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)

# Add columns with the names of origin and destination airports.
flights_named_dt <- flights_dt[
  airports_dt[, .(faa, name)], 
  on = .(origin = faa), 
  nomatch = 0
][
  , org_name := name
][
  airports_dt[, .(faa, name)], 
  on = .(dest = faa),
  nomatch = 0
][
  , dest_name := name
]

# Calculate departure delays by origin airport.
dep_delay_airport_dt <- flights_named_dt[
  , .(
      mean_dep_delay = mean(dep_delay, na.rm = TRUE),
      median_dep_delay = median(dep_delay, na.rm = TRUE)
    ),
  by = org_name
][
  order(-mean_dep_delay)
]

# Simply print by the property of data.table.
cat("\nMean and Median Departure Delay per Airport\n")
print(dep_delay_airport_dt)

# Generate the departure delay table.
dep_delay_airport_dt %>%
  kable(caption = "Mean and Median Departure Delay per Airport", align = "c") %>%
  kable_styling(full_width = FALSE)


```

```{r}
# Convert to data.table
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)

# Add origin and destination airport names
flights_named_dt <- flights_dt[
  airports_dt[, .(faa, name)], 
  on = .(origin = faa)
][
  , org_name := name
][
  , name := NULL
][
  airports_dt[, .(faa, name)], 
  on = .(dest = faa)
][
  , dest_name := name
][
  , name := NULL
]

# Calculate mean and median arrival delays per destination airport
arr_delay_airport_dt <- flights_named_dt[
  , .(
      mean_arr_delay = mean(arr_delay, na.rm = TRUE),
      median_arr_delay = median(arr_delay, na.rm = TRUE),
      count = .N
    ),
  by = dest_name
][
  count >= 10  # Filter groups with at least 10 observations
][
  order(-mean_arr_delay)  # Arrange by descending mean_arr_delay
]

# Simply print by the property of data.table.
cat("\nMean and Median Arrival Delay per Airport\n")
print(arr_delay_airport_dt[
  , .(dest_name, mean_arr_delay, median_arr_delay)  # Select columns of interest
])

# Generate the arrival delay table.
arr_delay_airport_dt[
  , .(dest_name, mean_arr_delay, median_arr_delay)  # Select desired columns
] %>%
  kable(caption = "Mean and Median Arrival Delay per Airport", align = "c") %>%
  kable_styling(full_width = FALSE)
```

## (b)

```{r}
# Convert to data.table
flights_dt <- as.data.table(flights)
planes_dt <- as.data.table(planes)

# Use data.table's join function to add the model column of planes to flights.
flights_with_model_dt <- merge(flights_dt, planes_dt, by = "tailnum", all.x = TRUE)

# Calculate the average speed and number of flights of the fastest aircraft.
fastest_plane_dt <- flights_with_model_dt[
  , .(flight_times = .N, 
      avg_speed = mean(distance / air_time * 60, na.rm = TRUE)), 
  by = model
][order(-avg_speed)][1][, .(model, avg_speed, flight_times)]

# Simply print by the property of data.table.
print(fastest_plane_dt)

# Generate a nice table.
fastest_plane_dt %>%
  setnames(c("avg_speed", "flight_times"), 
           c("average speed(MPH)", "number of flights")) %>%
  kable(caption = "The flight times of the fastest plane", align = "c") %>%
  kable_styling(full_width = FALSE)


```

# The Github Link

The link of this homework is https://github.com/Anonym027/Stats506.
